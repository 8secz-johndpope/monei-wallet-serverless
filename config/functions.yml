# Steps

checkTransaction:
  handler: src/steps/checkTransaction
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}"

checkWithdrawalTransaction:
  handler: src/steps/checkWithdrawalTransaction
  iamRoleStatements:
  - Effect: Allow
    Action: dynamodb:UpdateItem
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}"

checkRequiredBalance:
  handler: src/steps/checkRequiredBalance
  iamRoleStatements:
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MNEMONIC_KEY}-*"

checkTransactionStatus:
  handler: src/steps/checkTransactionStatus
  iamRoleStatements: []

approveTransaction:
  handler: src/steps/approveTransaction
  iamRoleStatements:
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.ENCRYPT_PASSWORD_KEY}-*"

transferTokens:
  handler: src/steps/transferTokens
  iamRoleStatements:
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MNEMONIC_KEY}-*"
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}"

transferFiat:
  handler: src/steps/transferFiat
  iamRoleStatements: []

# Hooks

postAuthentication:
  handler: src/hooks/postAuthentication
  iamRoleStatements:
    - Effect: Allow
      Action: cognito-idp:AdminUpdateUserAttributes
      Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.ENCRYPT_PASSWORD_KEY}-*"
    - Effect: Allow
      Action: states:StartExecution
      Resource: ${self:resources.Outputs.AllowTransferSM.Value}

userSignUp:
  handler: src/hooks/userSignUp
  events:
    - http:
        path: signup
        method: post
        cors: true
  iamRoleStatements:
    - Effect: Allow
      Action: cognito-idp:SignUp
      Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }

preSignUp:
  handler: src/hooks/preSignUp
  iamRoleStatements: []

defineAuthChallenge:
  handler: src/hooks/defineAuthChallenge
  iamRoleStatements: []

createAuthChallenge:
  handler: src/hooks/createAuthChallenge
  iamRoleStatements: []

verifyAuthChallenge:
  handler: src/hooks/verifyAuthChallenge
  iamRoleStatements:
    - Effect: Allow
      Action: cognito-idp:AdminUpdateUserAttributes
      Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
    - Effect: Allow
      Action: states:StartExecution
      Resource: ${self:resources.Outputs.TransferTokensSM.Value}

completeCheckout:
  handler: src/hooks/completeCheckout
  events:
  - http:
      path: complete_checkout
      method: get
      cors: true
  iamRoleStatements:
  - Effect: Allow
    Action:
    - cognito-idp:AdminUpdateUserAttributes
    - cognito-idp:AdminGetUser
    Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
  - Effect: Allow
    Action: secretsmanager:GetSecretValue
    Resource:
    - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MONEI_CREDENTIALS_KEY}-*"
    - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MNEMONIC_KEY}-*"
  - Effect: Allow
    Action: states:StartExecution
    Resource: ${self:resources.Outputs.CheckTransactionSM.Value}
  - Effect: Allow
    Action: dynamodb:PutItem
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}"

attachUserPolicy:
  handler: src/hooks/attachUserPolicy
  events:
  - http:
      path: attach_policy
      method: post
      cors: true
      authorizer: aws_iam
  iamRoleStatements:
  - Effect: Allow
    Action:
    - iot:AttachPrincipalPolicy
    - iot:DetachPrincipalPolicy
    - iot:CreatePolicy
    Resource: "*"

indexTransactions:
  handler: src/hooks/indexTransactions
  events:
  - stream:
      type: dynamodb
      startingPosition: LATEST
      arn: { Fn::GetAtt: [ 'TransactionsTable', 'StreamArn' ] }
      batchSize: 1
  iamRoleStatementsName: ${self:custom.resourcesPrefix}-indexTransactionsIAM
  iamRoleStatements:
  - Effect: Allow
    Action: iot:Publish
    Resource: "*"
  - Effect: Allow
    Action:
    - es:ESHttpPost
    - es:ESHttpDelete
    - es:ESHttpPut
    - es:ESHttpHead
    Resource: "*"


# Resolvers

getBalance:
  handler: src/resolvers/getBalance
  iamRoleStatements: []

newTransaction:
  handler: src/resolvers/newTransaction
  iamRoleStatements:
    - Effect: Allow
      Action: cognito-idp:ListUsers
      Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
    - Effect: Allow
      Action: states:StartExecution
      Resource: ${self:resources.Outputs.CheckTransactionSM.Value}
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MNEMONIC_KEY}-*"
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}"

newWithdrawal:
  handler: src/resolvers/newWithdrawal
  iamRoleStatements:
  - Effect: Allow
    Action: cognito-idp:AdminGetUser
    Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
  - Effect: Allow
    Action: states:StartExecution
    Resource: ${self:resources.Outputs.WithdrawTokensSM.Value}
  - Effect: Allow
    Action: secretsmanager:GetSecretValue
    Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MNEMONIC_KEY}-*"
  - Effect: Allow
    Action: dynamodb:PutItem
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.transactionsTable}"

prepareCheckout:
  handler: src/resolvers/prepareCheckout
  iamRoleStatements:
    - Effect: Allow
      Action: cognito-idp:AdminGetUser
      Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.MONEI_CREDENTIALS_KEY}-*"

attachBankAccount:
  handler: src/resolvers/attachBankAccount
  iamRoleStatements:
    - Effect: Allow
      Action: cognito-idp:AdminUpdateUserAttributes
      Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.TRANSFERWISE_CREDENTIALS_KEY}-*"

getBankAccount:
  handler: src/resolvers/getBankAccount
  iamRoleStatements:
  - Effect: Allow
    Action: cognito-idp:AdminGetUser
    Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
  - Effect: Allow
    Action: secretsmanager:GetSecretValue
    Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.TRANSFERWISE_CREDENTIALS_KEY}-*"

detachBankAccount:
  handler: src/resolvers/detachBankAccount
  iamRoleStatements:
  - Effect: Allow
    Action:
      - cognito-idp:AdminGetUser
      - cognito-idp:AdminUpdateUserAttributes
    Resource: { Fn::GetAtt: ['UserPool', 'Arn'] }
  - Effect: Allow
    Action: secretsmanager:GetSecretValue
    Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.config.TRANSFERWISE_CREDENTIALS_KEY}-*"
